function params = cmtk_read_registration(txtfname)
% cmtk_read_registration: read text files generated by initial affine | registration(x)
% 
% Usage:
%   params = cmtk_read_registration(txtfname)
%
% Args:
%   txtfname: name of txt file
%   f2use: files to run
%
% Returns:
%   params: registration values for each dof
%   params.xlate
%   params.rotate
%   params.scale
%   params.shear
%   params.center
% 
% Notes:
% hardcoded txt file structure:
% ! TYPEDSTREAM 2.4
% 
% registration {
% 	reference_study "./treference_2.nrrd"
% 	floating_study "./treference_2.nrrd"
% 	affine_xform {
% 		xlate 0 0 0 
% 		rotate 0 0 0 
% 		scale 1 1 1 
% 		shear 0 0 0 
% 		center 299.4 270.6 159.5 
% 	}
% }

% read text file
[~, b, c, d] = textread(txtfname, '%s %s %s %s');

if numel(b) == 8 % this is an initial affine
    params.xlate = [str2double(b{3}), str2double(c{3}), str2double(d{3})];
    params.rotate = [str2double(b{4}), str2double(c{4}), str2double(d{4})];
    params.scale = [str2double(b{5}), str2double(c{5}), str2double(d{5})];
    params.shear = [str2double(b{6}), str2double(c{6}), str2double(d{6})];
    params.center = [str2double(b{7}), str2double(c{7}), str2double(d{7})];
else % this is a regular affine
    params.xlate = [str2double(b{6}), str2double(c{6}), str2double(d{6})];
    params.rotate = [str2double(b{7}), str2double(c{7}), str2double(d{7})];
    params.scale = [str2double(b{8}), str2double(c{8}), str2double(d{8})];
    params.shear = [str2double(b{9}), str2double(c{9}), str2double(d{9})];
    params.center = [str2double(b{10}), str2double(c{10}), str2double(d{10})];
end

end